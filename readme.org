* About

A permissively licensed modern implementation of Gauss-Jacobi quadrature which returns the weights and nodes over the standard interval $[-1, 1]$.
** Usage
The most automated approach is to use the ~conda~ environment and ~fpm~ build:
#+begin_src bash
micromamba create -f environment.yml
micromamba activate gaussjacquad
fpm build
#+end_src

An analytic result can be obtained from the ~scripts~ folder.
#+begin_src bash
python scripts/gen_analytic_vals.py --npts <npoints> --alpha <alpha> --beta <beta> --n_dig <precision>
fpm test
#+end_src

Running the implemented recursion based Gauss-Jacobi can be done via:
#+begin_src bash
fpm run gjp_quad_rec -- <npoints> <alpha> <beta>
fpm run gjp_quad -- <npoints> <alpha> <beta> <method>
#+end_src

Currently the only supported methods are "recurrence" and "gw" (Golub Welsch).

*** Meson Support
A ~meson~ build backend is also present, which makes it easier to incorporate as subprojects of projects other than those supported by ~fpm~.

#+begin_src bash
meson setup bbdir
meson compile -C bbdir
./bbdir/gjp_quad <npoints> <alpha> <beta> <method>
#+end_src

** Notes
The ~recurrence~ method fails for high values of ~beta~ so the ~gw~ method
should be used in such situations.

** Development
*** Developing locally
A ~pre-commit~ job is setup on CI to enforce consistent styles, so it is best to
set it up locally as well (using [[https://pypa.github.io/pipx][pipx]] for isolation):

#+begin_src sh
# Run before commiting
pipx run pre-commit run --all-files
# Or install the git hook to enforce this
pipx run pre-commit install
#+end_src
*** Updating licenses
When the headers in the sources need to be updated modify ~add_headers.py~ and run:
#+begin_src sh
python scripts/add_headers.py --dirs src/ interfaces/ --ftypes "f90,c,h"
#+end_src
Remember to do this before exporting the code into other projects (e.g. [[https://github.com/atomic-solvers/featom][featom]]).
** Interfaces
*** ~C~ Header
We provide a header only interface, which bypasses passing strings between
Fortran and C. In order to do this, there is some duplication logic in
~GaussJacobiQuad~ and ~GaussJacobiQuadCInterp~.

There is also a CLI interface to the ~C~ bound interface, ~c_cli_gjpq~. However,
this will not be compiled by ~fpm~.

#+begin_src bash
meson setup bbdir
meson compile -C bbdir
./bbdir/c_cli_gjpq <npoints> <alpha> <beta> <method>
#+end_src

The ~C~ CLI might be more pleasant in that decimals do not need to be provided
explicitly for ~alpha~ and ~beta~.
* License
MIT.
